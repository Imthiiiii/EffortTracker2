// <auto-generated />
using System;
using EffortTracker.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EffortTracker.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20250602095829_initial_migration")]
    partial class initial_migration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EffortTracker.Models.Applications", b =>
                {
                    b.Property<int>("application_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("application_id"));

                    b.Property<string>("client_name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("application_id");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("EffortTracker.Models.Associates", b =>
                {
                    b.Property<int>("associate_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("associate_id"));

                    b.Property<string>("department")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("associate_id");

                    b.ToTable("Associates");
                });

            modelBuilder.Entity("EffortTracker.Models.Tasks", b =>
                {
                    b.Property<int>("task_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("task_id"));

                    b.Property<string>("description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("task_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("task_id");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("EffortTracker.Models.Timesheets", b =>
                {
                    b.Property<int>("timesheet_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("timesheet_id"));

                    b.Property<int>("application_id")
                        .HasColumnType("int");

                    b.Property<int>("associate_id")
                        .HasColumnType("int");

                    b.Property<string>("comments")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("date")
                        .HasColumnType("date");

                    b.Property<decimal>("hours")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("task_id")
                        .HasColumnType("int");

                    b.HasKey("timesheet_id");

                    b.HasIndex("application_id");

                    b.HasIndex("associate_id");

                    b.HasIndex("task_id");

                    b.ToTable("Timesheets");
                });

            modelBuilder.Entity("EffortTracker.Models.Users", b =>
                {
                    b.Property<int>("associate_id")
                        .HasColumnType("int");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("associate_id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("EffortTracker.Models.Timesheets", b =>
                {
                    b.HasOne("EffortTracker.Models.Applications", null)
                        .WithMany()
                        .HasForeignKey("application_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EffortTracker.Models.Associates", null)
                        .WithMany()
                        .HasForeignKey("associate_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EffortTracker.Models.Tasks", null)
                        .WithMany()
                        .HasForeignKey("task_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("EffortTracker.Models.Users", b =>
                {
                    b.HasOne("EffortTracker.Models.Associates", null)
                        .WithMany()
                        .HasForeignKey("associate_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
